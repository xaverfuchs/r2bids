---
title: "BIDS conversion example with toy data"
author: "Dr. Xaver Fuchs"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{A_Example_with_toy_data}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

```{r setup}
library(r2bids)
```

# Introduction

In this document, we demonstrate how to use the `create_bids` function. This function generates a BIDS-compliant dataset, including participant and task event files. We will walk through the following steps:

1. Create toy data.
2. Validate the input data.
3. Define metadata.
4. Create the BIDS dataset.
5. Read and inspect the generated files.

## Step 1: Create Toy Data

We will create a simple toy dataset with participant information and behavioral data.

```{r}
# Toy dataset
example_data <- data.frame(
  participant_id = c(1, 2, 3),
  session = c(1, 1, 1),
  response_time = c(350, 400, 375),
  accuracy = c(1, 0, 1)
)

# View the data
print(example_data)
```

The dataset contains three participants with their response times and accuracy. Each participant completed one session of a reaction time task.


## Step 2: Validate Input Data

Before creating a BIDS dataset, it's important to ensure that the input data complies with naming conventions (snake_case) and contains necessary columns like participant IDs and sessions. Here's an example of a function you could use to validate the input (you could expand this in your own implementation):

```{r}
validate_input <- function(data, participant_col, session_col) {
  if (!participant_col %in% names(data)) {
    stop("Participant column not found.")
  }
  if (!session_col %in% names(data)) {
    stop("Session column not found.")
  }
  message("Input data is valid.")
}

# Run validation
validate_input(example_data, "participant_id", "session")
```

If the input data is valid, you can proceed to the next steps.

## Step 3: Define Metadata
Next, we define the metadata for the task, which describes the behavioral variables recorded during the experiment.

```{r}
# Metadata for the behavioral task
meta_data <- list(
  response_time = "Response time in milliseconds",
  accuracy = "Correct (1) or incorrect (0) response"
)

# View the metadata
print(meta_data)
```

The metadata is a list where each element describes a specific column in the dataset.

## Step 4: Create the BIDS Dataset

Now, we use the create_bids function to generate the BIDS-compliant directory and files.

```{r}
# Output directory (temporary for this example)
output_dir <- tempdir()

# Task name for BIDS
task_name <- "reaction"

# Create the BIDS dataset
create_bids(example_data, output_dir, task_name, meta_data)
```

This function performs the following actions:

1) Creates the output directory (if it doesn't already exist).
2) Writes a participants.tsv file that includes participant IDs and session numbers.
3) Writes a task-specific .tsv file with the behavioral data (response times, accuracy, etc.).
4) Calls a helper function (assumed to exist in your implementation) to write the accompanying JSON metadata file.

## Step 5: Read and Inspect the BIDS Files

Once the files are created, you can inspect them to verify their content.

```{r}
# Read participants.tsv
participants_file <- file.path(output_dir, "participants.tsv")
participants_data <- read.table(participants_file, sep = "\t", header = TRUE)

# View participants data
print(participants_data)

# Read task event file
task_file <- file.path(output_dir, sprintf("sub-%s_task-%s_beh.tsv", unique(example_data$participant_id), task_name))
task_data <- read.table(task_file, sep = "\t", header = TRUE)

# View task data
print(task_data)

```

Conclusion

In this example, we walked through the entire process of creating a BIDS-compliant dataset, from generating toy data to writing and reading the output files. This workflow can be applied to larger, real-world datasets, ensuring compatibility with the BIDS standard for neuroimaging and behavioral experiments.

